//@version=5
//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
indicator('OrderBlock Reproduction Project', overlay=true, max_boxes_count=500, max_lines_count=500)

plotOB       = input.bool(defval=true, title='Plot OB', group='Order Blocks')
plotLines    = input.bool(defval=true, title='Plot Lines', group='Order Blocks')
obBullColor  = input.color(defval=color.new(color.green, 85), title='Bullish OB Color', inline='Set Custom Color', group='Order Blocks')
obBearColor  = input.color(defval=color.new(color.red, 85), title='Bearish OB Color', inline='Set Custom Color', group='Order Blocks')
obBoxBorder  = input.string(defval=line.style_solid, title='OB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Order Blocks', tooltip='To disable border, set Border Width below to 0')
obBorderTransparency = input.int(defval=100, title='OB Border Box Transparency', minval=0, maxval=100, group='Order Blocks')
obMaxBoxSet  = input.int(defval=100, title='Maximum OB Box Displayed', minval=1, maxval=100, group='Order Blocks', tooltip='Minimum = 1, Maximum = 100')
obMaxLineSet = input.int(defval=100, title='Maximum OB Line Displayed', minval=1, maxval=100, group='Order Blocks', tooltip='Minimum = 1, Maximum = 100')
plotLabelOB  = input.bool(defval=false, title='Plot OB Label', inline='OB label', group='Label Options')
obLabelColor = input.color(defval=color.gray, title='Color', inline='OB label', group='Label Options')
obLabelSize  = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='OB label', group='Label Options')

// Box Types
var int _ob = 1

// Box Labels
var string _obLabel = "OB"
var string _plus = "+"
var string _minus = "-"
var string _empty = ""

// Box Arrays
var box[] _bullBoxesOB = array.new_box()
var box[] _bearBoxesOB = array.new_box()

// Lines Arrays
// Bullish OB
var line[] _bullTopLines    = array.new_line()
var line[] _bullBottomLines = array.new_line()
var line[] _bullMiddleLines = array.new_line()
// Bearish OB
var line[] _bearTopLines    = array.new_line()
var line[] _bearBottomLines = array.new_line()
var line[] _bearMiddleLines = array.new_line()

// Functions
isUp(index) =>
    close[index] > open[index]

// The missing part seemed to be due to this way of considering a bullish/bearish candle
isUp2(index) =>
    close[index] > close[index + 1]

isDown(index) =>
    close[index] < open[index]

isDown2(index) =>
    close[index] < close[index + 1]

isObUp(index) =>                                                                    // Handle Overlapping before OB drawing
    isDown(index + 2) and (isUp(index + 1) or isUp2(index + 1))     and high[index + 1] > high[index + 2] and low[index] > high[index + 2]   or   isDown(index + 2) and high[index + 1] < high[index + 2] and low[index] > high[index + 2]

isObDown(index) =>
    isUp(index + 2)   and (isDown(index + 1) or isDown2(index + 1)) and low[index + 1] < low[index + 2]   and high[index] < low[index + 2]   or   isUp(index + 2) and low[index + 1]    > low[index + 2] and high[index] < low[index +2]


// Function to Handle Box Length
_controlBox(_boxes, _high, _low, _type) =>
    if array.size(_boxes) > 0
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            _boxLow = box.get_bottom(_box)
            _boxHigh = box.get_top(_box)
            _boxRight = box.get_right(_box)
            if na or (bar_index == _boxRight)
                box.set_right(_box, bar_index + 1)

// Function to Handle Lines Lenght
_controlLines(_lines) =>
    if array.size(_lines) > 0
        for i = array.size(_lines) - 1 to 0 by 1
            _line = array.get(_lines, i)
            _lineRight = line.get_x2(_line)
            if na or (bar_index == _lineRight)
                line.set_x2(_line, bar_index + 1)

// Function to Delete Order Blocks (Box)
// Bullish OB
deleteBullOB(_boxes) =>
    if array.size(_boxes) > 0
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            if low < box.get_bottom(_box)
                box.delete(array.remove(_boxes, i))

// Bearish OB
deleteBearOB(_boxes) =>
    if array.size(_boxes) > 0
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            if high > box.get_top(_box)
                box.delete(array.remove(_boxes, i))

// Middle Lines Deletion
// Bullish Middle Lines
deleteBullMiddleLines(_lines) =>
    if array.size(_lines) > 0
        for i = array.size(_lines) - 1 to 0 by 1
            _line = array.get(_lines, i)
            if low < line.get_y1(_line)
                line.delete(array.remove(_lines, i))

// Bearish Middle Lines
deleteBearMiddleLines(_lines) =>
    if array.size(_lines) > 0
        for i = array.size(_lines) - 1 to 0 by 1
            _line = array.get(_lines, i)
            if high > line.get_y1(_line)
                line.delete(array.remove(_lines, i))


// Top & Bottom Lines Deletion
// Bull Lines Deletion
// deleteBullLines(_bullTopLines, _bullBottomLines) =>
//     if array.size(_bullTopLines) > 0 or array.size(_bullBottomLines)
//         for i = array.size(_bullTopLines) - 1 to 0 by 1
//             for k = array.size(_bullBottomLines) -1 to 0 by 1
//                 _lineTop = array.get(_bullTopLines, i)
//                 _lineBot = array.get(_bullBottomLines, k)
//                 if low < line.get_y1(_lineBot)
//                     line.delete(array.remove(_bullBottomLines, k))
//                     line.delete(array.remove(_bullTopLines, i))
// Previous structure
// if array.size(_bullBottomLines) > 0
//     for i = array.size(_bullBottomLines) - 1 to 0 by 1
//         _line1 = array.get(_bullBottomLines, i)
//         _line2 = array.get(_bullTopLines, i)
//         if low < line.get_y1(_line1)
//             line.delete(array.remove(_bullBottomLines, i))
//             line.delete(array.remove(_bullTopLines, i))

// Bear Lines Deletion
// deleteBearLines(_bearTopLines, _bearBottomLines) =>
//     if array.size(_bearTopLines) > 0 or array.size(_bearBottomLines)
//         for i = array.size(_bearTopLines) - 1 to 0 by 1
//             for k = array.size(_bearBottomLines) -1 to 0 by 1
//                 _lineTop = array.get(_bearTopLines, i)
//                 _lineBot = array.get(_bearBottomLines, k)
//                 if high > line.get_y1(_lineTop)
//                     line.delete(array.remove(_bearTopLines, i))
//                     line.delete(array.remove(_bearBottomLines, k))
// Previous structure
// if array.size(_bearTopLines) > 0
//     for i = array.size(_bearTopLines) - 1 to 0 by 1
//         _line1 = array.get(_bearTopLines, i)
//         _line2 = array.get(_bearBottomLines, i)
//         if high > line.get_y1(_line1)
//             line.delete(array.remove(_bearTopLines, i))
//             line.delete(array.remove(_bearBottomLines, i))



//////////////////// Order Block //////////////////
// Bullish OB Box Plotting
if isObUp(1) and plotOB
    _bullboxOB = box.new(left=bar_index - 3, top=high[3], right=bar_index, bottom=math.min(low[3], low[2]), border_color=color.new(obBullColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBullColor, 
     text=plotLabelOB ? _obLabel + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bullBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bullBoxesOB))
    array.push(_bullBoxesOB, _bullboxOB)
    // Plot Lines attached to Bullish OB Box
    _bullTopLine    = line.new(x1=bar_index-3, y1=high[3], x2=bar_index, y2=high[3], color=color.purple, width=1)
    _bullBottomLine = line.new(x1=bar_index-3, y1=math.min(low[3], low[2]), x2=bar_index, y2=math.min(low[3], low[2]), color=color.rgb(221, 135, 233, 10), width=1)
    _bullMiddleLine = line.new(x1=bar_index-3, y1=(high[3]+math.min(low[3], low[2]))/2, x2=bar_index, y2=(high[3]+math.min(low[3], low[2]))/2, color=color.green, width=1, style = line.style_dashed)
    // Handle of the number of lines with obMaxLineSet
    if array.size(_bullTopLines) > obMaxLineSet
        line.delete(array.shift(_bullTopLines))
    array.push(_bullTopLines, _bullTopLine)
    if array.size(_bullBottomLines) > obMaxLineSet
        line.delete(array.shift(_bullBottomLines))
    array.push(_bullBottomLines, _bullBottomLine)
    if array.size(_bullMiddleLines) > obMaxLineSet
        line.delete(array.shift(_bullMiddleLines))
    array.push(_bullMiddleLines, _bullMiddleLine)

// Bearish OB Box Plotting
if isObDown(1) and plotOB
    _bearboxOB = box.new(left=bar_index - 3, top=math.max(high[3], high[2]), right=bar_index, bottom=low[3], border_color=color.new(obBearColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBearColor, 
     text=plotLabelOB ? _obLabel + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bearBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bearBoxesOB))
    array.push(_bearBoxesOB, _bearboxOB)
    // Plot Lines attached to Bearish OB Box
    _bearTopLine    = line.new(x1=bar_index-3, y1=math.max(high[3], high[2]), x2=bar_index, y2=math.max(high[3], high[2]), color=color.purple, width=1)
    _bearBottomLine = line.new(x1=bar_index-3, y1=low[3], x2=bar_index, y2=low[3], color=color.rgb(221, 135, 233, 10), width=1)
    _bearMiddleLine = line.new(x1=bar_index-3, y1=(math.max(high[3], high[2])+low[3])/2, x2=bar_index, y2=(math.max(high[3], high[2])+low[3])/2, color=color.green, width=1, style = line.style_dashed)
    // Gestion of the number of lines with obMaxLineSet
    if array.size(_bearTopLines) > obMaxLineSet
        line.delete(array.shift(_bearTopLines))
    array.push(_bearTopLines, _bearTopLine)
    if array.size(_bearBottomLines) > obMaxLineSet
        line.delete(array.shift(_bearBottomLines))
    array.push(_bearBottomLines, _bearBottomLine)
    if array.size(_bearMiddleLines) > obMaxLineSet
        line.delete(array.shift(_bearMiddleLines))
    array.push(_bearMiddleLines, _bearMiddleLine)


// Box Modifications ()
// Hey Fred! I have a quick question. Any idea why some of the Supply Zones are not 'mitigating'
//  (meaning changing color to gray?). I have encountered the problem a couple 
//  of times. Here are two examples in ONON and ARKK:

// I used a different structure, probably because I was not familiar with the structure.
// I forgot to use the "for" funtion that will detect everytime the candle penetrate the zone
// The error occured when we had to zones on top of each other the code only modified one OB 
// Bullish Box
modifyBullOB(_boxes) =>
    if array.size(_boxes) > 0
        for i= array.size(_boxes) -1 to 0 by 1
            _box = array.get(_boxes, i)
            if low >= box.get_bottom(_box) and low <= box.get_top(_box)
                box.set_top(_box, low)
                box.set_bgcolor(_box, color.new(color.gray, 90))
                box.set_border_color(_box, color.new(color.gray, 90))
// Previous Structure (No for function)
// Bullish Box
// if array.size(_bullBoxesOB) > 0
//     bullBoxOB = array.get(_bullBoxesOB, array.size(_bullBoxesOB) - 1)
//     if low >= box.get_bottom(bullBoxOB) and low <= box.get_top(bullBoxOB)
//         box.set_top(bullBoxOB, low)
//         box.set_bgcolor(bullBoxOB, color.new(color.gray, 90))
//         box.set_border_color(bullBoxOB, color.new(color.gray, 90))


// Bearish Box
modifyBearOB(_boxes) =>
    if array.size(_boxes) > 0
        for i= array.size(_boxes) -1 to 0 by 1
            _box = array.get(_boxes, i)
            if high <= box.get_top(_box) and high >= box.get_bottom(_box)
                box.set_bottom(_box, high)
                box.set_bgcolor(_box, color.new(color.gray, 90))
                box.set_border_color(_box, color.new(color.gray, 90))
// Previous Structure (No for function)
// Bearish Box
// if array.size(_bearBoxesOB) > 0
//     bearBoxOB = array.get(_bearBoxesOB, array.size(_bearBoxesOB) - 1)
//     if high <= box.get_top(bearBoxOB) and high >= box.get_bottom(bearBoxOB)
//         box.set_bottom(bearBoxOB, high)
//         box.set_bgcolor(bearBoxOB, color.new(color.gray, 90))
//         box.set_border_color(bearBoxOB, color.new(color.gray, 90))


// Lines Color Modification
// Bull Lines
modifyBullLinesColor(_bullTopLines, _bullBottomLines) =>
    if array.size(_bullTopLines) > 0 or array.size(_bullBottomLines)
        for i = array.size(_bullTopLines) - 1 to 0 by 1
            for k = array.size(_bullBottomLines) -1 to 0 by 1
                _lineTop = array.get(_bullTopLines, i)
                _lineBot = array.get(_bullBottomLines, k)
                if low >= line.get_y1(_lineBot) and low <= line.get_y1(_lineTop)
                    line.set_color(_lineTop, color.gray)
                    line.set_color(_lineBot, color.gray)
// Previous structure (No for function)
// if array.size(_bullTopLines) > 0 and array.size(_bullBottomLines) > 0
//     bullTopLine    = array.get(_bullTopLines,    array.size(_bullTopLines)    - 1)
//     bullBottomLine = array.get(_bullBottomLines, array.size(_bullBottomLines) - 1)
//     if low >= line.get_y1(bullBottomLine) and low <= line.get_y1(bullTopLine)
//         line.set_color(bullTopLine, color.gray)
//         line.set_color(bullBottomLine, color.gray)

// Bear Lines
modifyBearLinesColor(_bearTopLines, _bearBottomLines) =>
    if array.size(_bearTopLines) > 0 or array.size(_bearBottomLines)
        for i = array.size(_bearTopLines) - 1 to 0 by 1
            for k = array.size(_bearBottomLines) -1 to 0 by 1
                _lineTop = array.get(_bearTopLines, i)
                _lineBot = array.get(_bearBottomLines, k)
                if high <= line.get_y1(_lineTop) and high >= line.get_y1(_lineBot)
                    line.set_color(_lineTop, color.gray)
                    line.set_color(_lineBot, color.gray)
// Previous structure (No for function)
// if array.size(_bearTopLines) > 0 and array.size(_bearBottomLines) > 0
//     bearTopLine    = array.get(_bearTopLines,    array.size(_bearTopLines)    - 1)
//     bearBottomLine = array.get(_bearBottomLines, array.size(_bearBottomLines) - 1)
//     if high <= line.get_y1(bearTopLine) and high >= line.get_y1(bearBottomLine)
//         line.set_color(bearTopLine, color.gray)
//         line.set_color(bearBottomLine, color.gray)


// Here we call function that we have declared higher 

// Handle Box Right Side
if plotOB
    _controlBox(_bearBoxesOB, high, low, _ob)
    _controlBox(_bullBoxesOB, high, low, _ob)

// Handle Line Right Position
if plotLines
    _controlLines(_bullTopLines)
    _controlLines(_bullBottomLines)
    _controlLines(_bullMiddleLines)
    _controlLines(_bearTopLines)
    _controlLines(_bearBottomLines)
    _controlLines(_bearMiddleLines)

// Modify boxes (When partially crossed)
modifyBullOB(_bullBoxesOB)
modifyBearOB(_bearBoxesOB)

// Handle Top & Bottom lines color
modifyBullLinesColor(_bullTopLines, _bullBottomLines)
modifyBearLinesColor(_bearTopLines, _bearBottomLines)

// OB Deletion
deleteBullOB(_bullBoxesOB)
deleteBearOB(_bearBoxesOB)

// Middle Lines Deletion
deleteBullMiddleLines(_bullMiddleLines)
deleteBearMiddleLines(_bearMiddleLines)

// Top & Bottom Lines Deletion
// I coudn't translate this code into a function but it is working like this
// Previous structure
if array.size(_bullBottomLines) > 0
    for i = array.size(_bullBottomLines) - 1 to 0 by 1
        _line1 = array.get(_bullBottomLines, i)
        _line2 = array.get(_bullTopLines, i)
        if low < line.get_y1(_line1)
            line.delete(array.remove(_bullBottomLines, i))
            line.delete(array.remove(_bullTopLines, i))


// Previous structure
if array.size(_bearTopLines) > 0
    for i = array.size(_bearTopLines) - 1 to 0 by 1
        _line1 = array.get(_bearTopLines, i)
        _line2 = array.get(_bearBottomLines, i)
        if high > line.get_y1(_line1)
            line.delete(array.remove(_bearTopLines, i))
            line.delete(array.remove(_bearBottomLines, i))
